// Code generated by MockGen. DO NOT EDIT.
// Source: ./core/message_types.go
//
// Generated by this command:
//
//	mockgen -source=./core/message_types.go -package=mocks
//
// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	core "main/core"
	http "net/http"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockClientSender is a mock of ClientSender interface.
type MockClientSender struct {
	ctrl     *gomock.Controller
	recorder *MockClientSenderMockRecorder
}

// MockClientSenderMockRecorder is the mock recorder for MockClientSender.
type MockClientSenderMockRecorder struct {
	mock *MockClientSender
}

// NewMockClientSender creates a new mock instance.
func NewMockClientSender(ctrl *gomock.Controller) *MockClientSender {
	mock := &MockClientSender{ctrl: ctrl}
	mock.recorder = &MockClientSenderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClientSender) EXPECT() *MockClientSenderMockRecorder {
	return m.recorder
}

// SendToClient mocks base method.
func (m *MockClientSender) SendToClient(ctx context.Context, clientId string, Message core.PushMessage) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendToClient", ctx, clientId, Message)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendToClient indicates an expected call of SendToClient.
func (mr *MockClientSenderMockRecorder) SendToClient(ctx, clientId, Message any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendToClient", reflect.TypeOf((*MockClientSender)(nil).SendToClient), ctx, clientId, Message)
}

// MockTelegramSender is a mock of TelegramSender interface.
type MockTelegramSender struct {
	ctrl     *gomock.Controller
	recorder *MockTelegramSenderMockRecorder
}

// MockTelegramSenderMockRecorder is the mock recorder for MockTelegramSender.
type MockTelegramSenderMockRecorder struct {
	mock *MockTelegramSender
}

// NewMockTelegramSender creates a new mock instance.
func NewMockTelegramSender(ctrl *gomock.Controller) *MockTelegramSender {
	mock := &MockTelegramSender{ctrl: ctrl}
	mock.recorder = &MockTelegramSenderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTelegramSender) EXPECT() *MockTelegramSenderMockRecorder {
	return m.recorder
}

// IsClientPermitted mocks base method.
func (m *MockTelegramSender) IsClientPermitted(ctx context.Context, r *http.Request, msgFrom int, msgText, msgType string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsClientPermitted", ctx, r, msgFrom, msgText, msgType)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsClientPermitted indicates an expected call of IsClientPermitted.
func (mr *MockTelegramSenderMockRecorder) IsClientPermitted(ctx, r, msgFrom, msgText, msgType any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsClientPermitted", reflect.TypeOf((*MockTelegramSender)(nil).IsClientPermitted), ctx, r, msgFrom, msgText, msgType)
}

// SendOutbound mocks base method.
func (m *MockTelegramSender) SendOutbound(ctx context.Context, chatId int, Message core.OutboundMessage) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendOutbound", ctx, chatId, Message)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendOutbound indicates an expected call of SendOutbound.
func (mr *MockTelegramSenderMockRecorder) SendOutbound(ctx, chatId, Message any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendOutbound", reflect.TypeOf((*MockTelegramSender)(nil).SendOutbound), ctx, chatId, Message)
}

// MockSocketSender is a mock of SocketSender interface.
type MockSocketSender struct {
	ctrl     *gomock.Controller
	recorder *MockSocketSenderMockRecorder
}

// MockSocketSenderMockRecorder is the mock recorder for MockSocketSender.
type MockSocketSenderMockRecorder struct {
	mock *MockSocketSender
}

// NewMockSocketSender creates a new mock instance.
func NewMockSocketSender(ctrl *gomock.Controller) *MockSocketSender {
	mock := &MockSocketSender{ctrl: ctrl}
	mock.recorder = &MockSocketSenderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSocketSender) EXPECT() *MockSocketSenderMockRecorder {
	return m.recorder
}

// DeregisterActiveSocket mocks base method.
func (m *MockSocketSender) DeregisterActiveSocket(clientId, connectionId string) (bool, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeregisterActiveSocket", clientId, connectionId)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// DeregisterActiveSocket indicates an expected call of DeregisterActiveSocket.
func (mr *MockSocketSenderMockRecorder) DeregisterActiveSocket(clientId, connectionId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeregisterActiveSocket", reflect.TypeOf((*MockSocketSender)(nil).DeregisterActiveSocket), clientId, connectionId)
}

// RegisterActiveSocket mocks base method.
func (m *MockSocketSender) RegisterActiveSocket(clientId, connectionId string) *core.ActiveSocket {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterActiveSocket", clientId, connectionId)
	ret0, _ := ret[0].(*core.ActiveSocket)
	return ret0
}

// RegisterActiveSocket indicates an expected call of RegisterActiveSocket.
func (mr *MockSocketSenderMockRecorder) RegisterActiveSocket(clientId, connectionId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterActiveSocket", reflect.TypeOf((*MockSocketSender)(nil).RegisterActiveSocket), clientId, connectionId)
}

// SendToClient mocks base method.
func (m *MockSocketSender) SendToClient(ctx context.Context, clientId string, Message core.PushMessage) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendToClient", ctx, clientId, Message)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendToClient indicates an expected call of SendToClient.
func (mr *MockSocketSenderMockRecorder) SendToClient(ctx, clientId, Message any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendToClient", reflect.TypeOf((*MockSocketSender)(nil).SendToClient), ctx, clientId, Message)
}
