// Code generated by MockGen. DO NOT EDIT.
// Source: ./core/intent_types.go
//
// Generated by this command:
//
//	mockgen -source=./core/intent_types.go -package=mocks
//
// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	core "main/core"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockIntentMatcher is a mock of IntentMatcher interface.
type MockIntentMatcher struct {
	ctrl     *gomock.Controller
	recorder *MockIntentMatcherMockRecorder
}

// MockIntentMatcherMockRecorder is the mock recorder for MockIntentMatcher.
type MockIntentMatcherMockRecorder struct {
	mock *MockIntentMatcher
}

// NewMockIntentMatcher creates a new mock instance.
func NewMockIntentMatcher(ctrl *gomock.Controller) *MockIntentMatcher {
	mock := &MockIntentMatcher{ctrl: ctrl}
	mock.recorder = &MockIntentMatcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIntentMatcher) EXPECT() *MockIntentMatcherMockRecorder {
	return m.recorder
}

// Match mocks base method.
func (m *MockIntentMatcher) Match(ctx context.Context, req *core.Request) (core.IntentActor, core.IntentMetadata, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Match", ctx, req)
	ret0, _ := ret[0].(core.IntentActor)
	ret1, _ := ret[1].(core.IntentMetadata)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Match indicates an expected call of Match.
func (mr *MockIntentMatcherMockRecorder) Match(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Match", reflect.TypeOf((*MockIntentMatcher)(nil).Match), ctx, req)
}

// MockIntentActor is a mock of IntentActor interface.
type MockIntentActor struct {
	ctrl     *gomock.Controller
	recorder *MockIntentActorMockRecorder
}

// MockIntentActorMockRecorder is the mock recorder for MockIntentActor.
type MockIntentActorMockRecorder struct {
	mock *MockIntentActor
}

// NewMockIntentActor creates a new mock instance.
func NewMockIntentActor(ctrl *gomock.Controller) *MockIntentActor {
	mock := &MockIntentActor{ctrl: ctrl}
	mock.recorder = &MockIntentActorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIntentActor) EXPECT() *MockIntentActorMockRecorder {
	return m.recorder
}

// ActOnIntent mocks base method.
func (m *MockIntentActor) ActOnIntent(ctx context.Context, req *core.Request, md *core.IntentMetadata) (core.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ActOnIntent", ctx, req, md)
	ret0, _ := ret[0].(core.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ActOnIntent indicates an expected call of ActOnIntent.
func (mr *MockIntentActorMockRecorder) ActOnIntent(ctx, req, md any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ActOnIntent", reflect.TypeOf((*MockIntentActor)(nil).ActOnIntent), ctx, req, md)
}

// IntentLabel mocks base method.
func (m *MockIntentActor) IntentLabel() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IntentLabel")
	ret0, _ := ret[0].(string)
	return ret0
}

// IntentLabel indicates an expected call of IntentLabel.
func (mr *MockIntentActorMockRecorder) IntentLabel() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IntentLabel", reflect.TypeOf((*MockIntentActor)(nil).IntentLabel))
}

// IntentParsePrompt mocks base method.
func (m *MockIntentActor) IntentParsePrompt(req *core.Request) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IntentParsePrompt", req)
	ret0, _ := ret[0].(string)
	return ret0
}

// IntentParsePrompt indicates an expected call of IntentParsePrompt.
func (mr *MockIntentActorMockRecorder) IntentParsePrompt(req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IntentParsePrompt", reflect.TypeOf((*MockIntentActor)(nil).IntentParsePrompt), req)
}

// MockPushIntentActor is a mock of PushIntentActor interface.
type MockPushIntentActor struct {
	ctrl     *gomock.Controller
	recorder *MockPushIntentActorMockRecorder
}

// MockPushIntentActorMockRecorder is the mock recorder for MockPushIntentActor.
type MockPushIntentActorMockRecorder struct {
	mock *MockPushIntentActor
}

// NewMockPushIntentActor creates a new mock instance.
func NewMockPushIntentActor(ctrl *gomock.Controller) *MockPushIntentActor {
	mock := &MockPushIntentActor{ctrl: ctrl}
	mock.recorder = &MockPushIntentActorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPushIntentActor) EXPECT() *MockPushIntentActorMockRecorder {
	return m.recorder
}

// ActOnAsyncIntent mocks base method.
func (m *MockPushIntentActor) ActOnAsyncIntent(ctx context.Context, source, clientId string, md *core.IntentMetadata) (core.PushMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ActOnAsyncIntent", ctx, source, clientId, md)
	ret0, _ := ret[0].(core.PushMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ActOnAsyncIntent indicates an expected call of ActOnAsyncIntent.
func (mr *MockPushIntentActorMockRecorder) ActOnAsyncIntent(ctx, source, clientId, md any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ActOnAsyncIntent", reflect.TypeOf((*MockPushIntentActor)(nil).ActOnAsyncIntent), ctx, source, clientId, md)
}

// ActOnIntent mocks base method.
func (m *MockPushIntentActor) ActOnIntent(ctx context.Context, req *core.Request, md *core.IntentMetadata) (core.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ActOnIntent", ctx, req, md)
	ret0, _ := ret[0].(core.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ActOnIntent indicates an expected call of ActOnIntent.
func (mr *MockPushIntentActorMockRecorder) ActOnIntent(ctx, req, md any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ActOnIntent", reflect.TypeOf((*MockPushIntentActor)(nil).ActOnIntent), ctx, req, md)
}

// IntentLabel mocks base method.
func (m *MockPushIntentActor) IntentLabel() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IntentLabel")
	ret0, _ := ret[0].(string)
	return ret0
}

// IntentLabel indicates an expected call of IntentLabel.
func (mr *MockPushIntentActorMockRecorder) IntentLabel() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IntentLabel", reflect.TypeOf((*MockPushIntentActor)(nil).IntentLabel))
}

// IntentParsePrompt mocks base method.
func (m *MockPushIntentActor) IntentParsePrompt(req *core.Request) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IntentParsePrompt", req)
	ret0, _ := ret[0].(string)
	return ret0
}

// IntentParsePrompt indicates an expected call of IntentParsePrompt.
func (mr *MockPushIntentActorMockRecorder) IntentParsePrompt(req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IntentParsePrompt", reflect.TypeOf((*MockPushIntentActor)(nil).IntentParsePrompt), req)
}

// MockPushIntentFactory is a mock of PushIntentFactory interface.
type MockPushIntentFactory struct {
	ctrl     *gomock.Controller
	recorder *MockPushIntentFactoryMockRecorder
}

// MockPushIntentFactoryMockRecorder is the mock recorder for MockPushIntentFactory.
type MockPushIntentFactoryMockRecorder struct {
	mock *MockPushIntentFactory
}

// NewMockPushIntentFactory creates a new mock instance.
func NewMockPushIntentFactory(ctrl *gomock.Controller) *MockPushIntentFactory {
	mock := &MockPushIntentFactory{ctrl: ctrl}
	mock.recorder = &MockPushIntentFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPushIntentFactory) EXPECT() *MockPushIntentFactoryMockRecorder {
	return m.recorder
}

// PushIntent mocks base method.
func (m *MockPushIntentFactory) PushIntent(named string) core.PushIntentActor {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PushIntent", named)
	ret0, _ := ret[0].(core.PushIntentActor)
	return ret0
}

// PushIntent indicates an expected call of PushIntent.
func (mr *MockPushIntentFactoryMockRecorder) PushIntent(named any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PushIntent", reflect.TypeOf((*MockPushIntentFactory)(nil).PushIntent), named)
}
