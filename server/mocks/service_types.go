// Code generated by MockGen. DO NOT EDIT.
// Source: ./core/service_types.go
//
// Generated by this command:
//
//	mockgen -source=./core/service_types.go -package=mocks
//
// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockLLM is a mock of LLM interface.
type MockLLM struct {
	ctrl     *gomock.Controller
	recorder *MockLLMMockRecorder
}

// MockLLMMockRecorder is the mock recorder for MockLLM.
type MockLLMMockRecorder struct {
	mock *MockLLM
}

// NewMockLLM creates a new mock instance.
func NewMockLLM(ctrl *gomock.Controller) *MockLLM {
	mock := &MockLLM{ctrl: ctrl}
	mock.recorder = &MockLLMMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLLM) EXPECT() *MockLLMMockRecorder {
	return m.recorder
}

// Completion mocks base method.
func (m *MockLLM) Completion(ctx context.Context, prompt string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Completion", ctx, prompt)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Completion indicates an expected call of Completion.
func (mr *MockLLMMockRecorder) Completion(ctx, prompt any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Completion", reflect.TypeOf((*MockLLM)(nil).Completion), ctx, prompt)
}

// Embedding mocks base method.
func (m *MockLLM) Embedding(ctx context.Context, text string) ([]float32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Embedding", ctx, text)
	ret0, _ := ret[0].([]float32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Embedding indicates an expected call of Embedding.
func (mr *MockLLMMockRecorder) Embedding(ctx, text any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Embedding", reflect.TypeOf((*MockLLM)(nil).Embedding), ctx, text)
}

// MockSTT is a mock of STT interface.
type MockSTT struct {
	ctrl     *gomock.Controller
	recorder *MockSTTMockRecorder
}

// MockSTTMockRecorder is the mock recorder for MockSTT.
type MockSTTMockRecorder struct {
	mock *MockSTT
}

// NewMockSTT creates a new mock instance.
func NewMockSTT(ctrl *gomock.Controller) *MockSTT {
	mock := &MockSTT{ctrl: ctrl}
	mock.recorder = &MockSTTMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSTT) EXPECT() *MockSTTMockRecorder {
	return m.recorder
}

// SpeechToText mocks base method.
func (m *MockSTT) SpeechToText(ctx context.Context, wavBytes []byte) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SpeechToText", ctx, wavBytes)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SpeechToText indicates an expected call of SpeechToText.
func (mr *MockSTTMockRecorder) SpeechToText(ctx, wavBytes any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SpeechToText", reflect.TypeOf((*MockSTT)(nil).SpeechToText), ctx, wavBytes)
}
